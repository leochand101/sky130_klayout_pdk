# Copyright 2022 SkyWater PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

#===========================================================================================================================
#------------------------------------------------- SKY130 LVS RULE DECK ----------------------------------------------------
#===========================================================================================================================

require 'time'
require "logger"

exec_start_time = Time.now

logger = Logger.new(STDOUT)

logger.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10,40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================

logger.info("Starting running SKY130 Klayout LVS runset on %s" % [$input])

#=== GET LAYOUT ===
if $input
  source($input)
  logger.info("Layout file: #{$input}")
else
  logger.info("No layout loaded, please add your layout file")
end

#=== GET THREADS ===
if $thr
  threads($thr)
  logger.info("Number of threads: #{$thr}")
else
  threads(16)
  logger.info("Number of threads: 16")
end

#=== GET REPORT ===
if $report
  report_lvs($report)
  logger.info("Final report: #{$report}")
else
  report_lvs(source.cell_name+".lvsdb")
  logger.info("Final report: #{source.cell_name}.lvsdb")
end

#=== GET SUBSTRATE NAME ===
if $lvs_sub
  substrate_name = $lvs_sub
  logger.info("Substrate name: #{$lvs_sub}")
else
  substrate_name = "sky130_gnd"
  logger.info("No substrate name given, default name is sky130_gnd")
end

#=== CUSTOM WRITER CLASS ===
class SubcircuitModels < RBA::NetlistSpiceWriterDelegate

  def write_device(device)
    device_class = device.device_class
    if device_class.name.include?('sky130')
      str = "X" + device.expanded_name
    else
      str = device.id + device.expanded_name
    end
    device_class.terminal_definitions.each do |td|
      str += " " + net_to_string(device.net_for_terminal(td.id))
    end
    str += " " + device_class.name
    if device_class.name.include?('nfet') || device_class.name.include?('pfet')
      device_class.parameter_definitions.each do |pd|
        str += " " + pd.name + ("=%.12g" % device.parameter(pd.id))
      end
    end
    emit_line(str)
  end      

end

#=== CUSTOM WRITER ===
custom_spice_writer = RBA::NetlistSpiceWriter::new(SubcircuitModels::new)

#=== NET NAMES OPTION ===
# true: use net names instead of numbers
# false: use numbers for nets
if $spice_net_names == "false"
  custom_spice_writer.use_net_names = false
  logger.info("Extracted netlist with net names: #{$spice_net_names}")
else
  custom_spice_writer.use_net_names = true
  logger.info("Extracted netlist with net names: true")
end

#=== COMMENTS OPTION ===
# true: put in comments with details
# false: no comments
if $spice_comments == "true"
  custom_spice_writer.with_comments = true
  logger.info("Extracted netlist with comments in details: #{$spice_comments}")
else
  custom_spice_writer.with_comments = false
  logger.info("Extracted netlist with comments in details: false")
end

if $target_netlist
  target_netlist($target_netlist, custom_spice_writer, "Extracted by KLayout with SKY130 LVS runset on : #{Time.now.strftime("%d/%m/%Y %H:%M")}")
  logger.info("Extracted netlist file: #{$target_netlist}")
else
  target_netlist(File.join(File.dirname(RBA::CellView::active.filename), source.cell_name+"_extracted.cir"), custom_spice_writer,  "Extracted by KLayout with SKY130 LVS runset on : #{Time.now.strftime("%d/%m/%Y %H:%M")}")
  logger.info("Extracted netlist file: #{source.cell_name}_extracted.cir")
end

#=== EXTRACTION SCALE ===
if $scale  == "true"
  device_scaling(1000000)
  logger.info("device_scaling: true")
else
  logger.info("device_scaling: false")
end

#=== PRINT DETAILS ===
if $verbose == "true"
  verbose(true)
  logger.info("Verbose mode: #{$verbose}")
else
  verbose(false)
  logger.info("Verbose mode: false")
end

# === TILING MODE ===
if $run_mode == "tiling"
  # use a tile size of 1mm - not used in deep mode-
  # tiles(500.um)
  # use a tile border of 10 micron:
  # tile_borders(10.um)
  tiles(1000)
  logger.info("Tiling  mode is enabled.")

elsif $run_mode == "deep"
  #=== HIER MODE ===
  deep
  logger.info("deep mode is enabled.")

elsif $run_mode == "flat"
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled.")

else
  #=== DEFAULT MODE ===
  deep
  logger.info("deep  mode is enabled.")

end # run_mode


#================================================
# --------------- CUSTOM CLASSES ----------------
#================================================

#====================== CUSTOM READER =========================
class SubcircuitModelsReader < RBA::NetlistSpiceReaderDelegate

  def parse_element(s, element)
    if element == "C"
      super(s + " C=2e-16", element)
    elsif element == "R"
      super(s + " R=0", element)
    elsif element == "L"
      super(s + " L=0", element)
    else
      super
    end
  end

  # implements the delegate interface:
  def wants_subcircuit(name)
    name.include?('vpp') || name.include?('ind')
  end

  # take and translate the element
  def element(circuit, el, name, model, value, nets, params)

    unless el == "X" && ((model.include?('vpp')) || (model.include?('ind')))
      # all other elements are left to the standard implementation
      return super
    end

    # provide a device class
    if model.include?('vpp')
      cls = RBA::DeviceClassMOS3Transistor::new
      cls.name = model
      circuit.netlist.add(cls)

      # create a device
      device = circuit.create_device(cls, name)

      # and configure the device
      [ "S", "G", "D" ].each_with_index do |t,index|
        device.connect_terminal(t, nets[index])
      end
    end
    
    if model.include?('ind')
      cls = RBA::DeviceClassMOS4Transistor::new
      cls.name = model
      circuit.netlist.add(cls)

      # create a device
      device = circuit.create_device(cls, name)

      # and configure the device
      [ "S", "G", "D", "B" ].each_with_index do |t,index|
        device.connect_terminal(t, nets[index])
      end
    end

    return true

  end

end

# Instantiate a reader using the new delegate
reader = RBA::NetlistSpiceReader::new(SubcircuitModelsReader::new)

#=== GET NETLIST ===
if $schematic
  schematic($schematic, reader)
  logger.info("Netlist file: #{$schematic}")
else
  puts "No schematic loaded , please add your netlist file"
  logger.info("No schematic loaded , please add your netlist file")
end

class BResistor < RBA::DeviceClassResistorWithBulk
  def initialize
    super
    enable_parameter("R", false)
    enable_parameter("W", true)
    enable_parameter("L", true)
  end
end

class NResistor < RBA::DeviceClassResistor
  def initialize
    super
    enable_parameter("R", false)
    enable_parameter("W", true)
    enable_parameter("L", true)
  end
end

class MIMCap < RBA::DeviceClassCapacitor
  def initialize
    super
    enable_parameter("C", true)
    enable_parameter("A", true)
    enable_parameter("P", true)
  end
end

# Inductor device extraction
class CustomInductorExtraction < RBA::GenericDeviceExtractor

  def initialize(name)
    self.name = name
  end

  def setup

    define_layer("C1", "Conductor1")
    define_layer("C2", "Conductor2")
    define_layer("M", "Inductor")
    define_layer("B", "Bulk")

    register_device_class(RBA::DeviceClassMOS4Transistor::new)

  end

  def extract_devices(layer_geometry)

    # layer_geometry provides the input layers in the order they are 
    # defined with "define_layer"
    # conductor is supposed to be "conductor outside marker"
    # inductor is supposed to be "conductor inside marker"
    #######################################################
    conductor1 = layer_geometry[0]
    conductor2 = layer_geometry[1]
    inductor   = layer_geometry[2]
    bulk       = layer_geometry[3]

    inductor_merged = inductor.merged
    bulk_merged2     = bulk.merged

    # this will be the edge where the inductor turns into conductor
    marker_edges  = (conductor1.merged.edges & inductor_merged.edges)
    marker_edges2 = (conductor2.merged.edges & inductor_merged.edges)

    inductor_merged.each do |r|

      # identify the edges where this inductor shape ends
      interface_edges = marker_edges.interacting(RBA::Region::new(r))

      # form terminal shapes from these edges
      terminals = interface_edges.extended_out(1)
      terminals2 = marker_edges2.extended_out(1)
      
      if terminals2.size > 0

        device = create_device
        #device.set_parameter(RBA::DeviceClassinductor::PARAM_R, @sheet_rho * l / w);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_S, 0, terminals[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_G, 0, terminals[1]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_D, 1, terminals2[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_B, 3, bulk_merged2[0]);

      end
      
    end

  end

  def get_connectivity(layout, layers)

    # the layer definition is marker, conductor, inductor  
    # * inductor is used for extraction
    # * conductor is used for producing the terminals
    conductor1 = layers[0]
    conductor2 = layers[1]
    inductor   = layers[2]
    bulk       = layers[3]
    conn = RBA::Connectivity::new
    conn.connect(inductor, inductor)
    conn.connect(conductor1, inductor)
    conn.connect(conductor2, inductor)
    conn.connect(bulk, inductor)

    return conn

  end

end

# Capacitor device extraction
class CustomCapacitorExtraction < RBA::GenericDeviceExtractor

  def initialize(name)
    self.name = name
  end

  def setup

    define_layer("C1", "Conductor1")
    define_layer("C2", "Conductor2")
    define_layer("M", "Capacitor")
    define_layer("B", "Bulk")

    register_device_class(RBA::DeviceClassMOS4Transistor::new)

  end

  def extract_devices(layer_geometry)

    # layer_geometry provides the input layers in the order they are 
    # defined with "define_layer"
    # conductor is supposed to be "conductor outside marker"
    # capacitor is supposed to be "conductor inside marker"
    #######################################################
    conductor1 = layer_geometry[0]
    conductor2 = layer_geometry[1]
    capacitor  = layer_geometry[2]
    bulk       = layer_geometry[3]

    capacitor_merged = capacitor.merged
    bulk_merged2     = bulk.merged

    # this will be the edge where the capacitor turns into conductor
    marker_edges  = (conductor1.merged.edges & capacitor_merged.edges)
    terminals2    = (conductor2.merged & capacitor_merged)

    capacitor_merged.each do |r|

      # identify the edges where this capacitor shape ends
      interface_edges = marker_edges.interacting(RBA::Region::new(r))

      # form terminal shapes from these edges
      terminals = interface_edges.extended_out(1)
      
      if terminals2.size > 0

        device = create_device
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_S, 0, terminals[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_G, 0, terminals[1]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_D, 1, terminals2[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_B, 3, bulk_merged2[0]);

      end
      
    end

  end

  def get_connectivity(layout, layers)

    # the layer definition is marker, conductor, capacitor  
    # * capacitor is used for extraction
    # * conductor is used for producing the terminals
    conductor1 = layers[0]
    conductor2 = layers[1]
    capacitor  = layers[2]
    bulk       = layers[3]
    conn = RBA::Connectivity::new
    conn.connect(capacitor, capacitor)
    conn.connect(conductor1, capacitor)
    conn.connect(conductor2, capacitor)
    conn.connect(bulk, capacitor)

    return conn

  end

end

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info("Read in polygons from layers.")

#=== DRAWINGS ===
bound       = polygons(235, 4  )
sub_pin     = polygons(64 , 59 )
dnwell      = polygons(64 , 18 )
pwell_pin   = polygons(122, 16 )
pwell_res   = polygons(64 , 13 )
pwbm        = polygons(19 , 44 )
pwde        = polygons(124, 20 )
nwell       = polygons(64 , 20 )
nwell_pin   = polygons(64 , 16 )
diff        = polygons(65 , 20 )
tap         = polygons(65 , 44 )
psdm        = polygons(94 , 20 )
nsdm        = polygons(93 , 44 )
lvtn        = polygons(125, 44 )
hvtr        = polygons(18 , 20 )
hvtp        = polygons(78 , 44 )
tunm        = polygons(80 , 20 )
sonos       = polygons(80 , 20 )
coreid      = polygons(81 , 2  )
stdcell     = polygons(81 , 4  )
npnid       = polygons(82 , 20 )
pnpid       = polygons(82 , 44 )
rpm         = polygons(86 , 20 )
urpm        = polygons(79 , 20 )
ldntm       = polygons(11 , 44 )
hvntm       = polygons(125, 20 )
poly        = polygons(66 , 20 )
poly_pin    = polygons(66 , 16 )
poly_res    = polygons(66 , 13 )
poly_cut    = polygons(66 , 14 )
poly_short  = polygons(66 , 15 )
hvi         = polygons(75 , 20 )
licon       = polygons(66 , 44 )
npc         = polygons(95 , 20 )
diff_res    = polygons(65 , 13 )
diff_cut    = polygons(65 , 14 )
diode       = polygons(81 , 23 )
li          = polygons(67 , 20 )
li_pin      = polygons(67 , 16 )
li_res      = polygons(67 , 13 )
li_cut      = polygons(67 , 14 )
mcon        = polygons(67 , 44 )
met1        = polygons(68 , 20 )
met1_pin    = polygons(68 , 16 )
met1_res    = polygons(68 , 13 )
met1_cut    = polygons(68 , 14 )
via1        = polygons(68 , 44 )
met2        = polygons(69 , 20 )
met2_pin    = polygons(69 , 16 )
met2_res    = polygons(69 , 13 )
met2_cut    = polygons(69 , 14 )
met2_fuse   = polygons(69 , 17 )
via2        = polygons(69 , 44 )
met3        = polygons(70 , 20 )
met3_pin    = polygons(70 , 16 )
met3_res    = polygons(70 , 13 )
met3_cut    = polygons(70 , 14 )
met3_fuse   = polygons(70 , 17 )
via3        = polygons(70 , 44 )
met4        = polygons(71 , 20 )
met4_pin    = polygons(71 , 16 )
met4_res    = polygons(71 , 13 )
met4_cut    = polygons(71 , 14 )
met4_fuse   = polygons(71 , 17 )
via4        = polygons(71 , 44 )
met5        = polygons(72 , 20 )
met5_pin    = polygons(72 , 16 )
met5_res    = polygons(72 , 13 )
met5_cut    = polygons(72 , 14 )
rdl         = polygons(74 , 20 )
rdl_pin     = polygons(74 , 16 )
glass       = polygons(76 , 20 )
capm        = polygons(89 , 44 )
capm2       = polygons(97 , 44 )
lowtapd     = polygons(81 , 14 )
fillobsm1   = polygons(62 , 24 )
fillobsm2   = polygons(105, 52 )
fillobsm3   = polygons(107, 24 )
fillobsm4   = polygons(112, 4  )
ncm         = polygons(92 , 44 )
natfet      = polygons(124, 21 )
pad         = polygons(76 , 20 )
nsm         = polygons(61 , 20 )
vhvi        = polygons(74 , 21 )
uhvi        = polygons(74 , 22 )
npn         = polygons(82 , 20 )
inductor    = polygons(82 , 24 )
vpp         = polygons(82 , 64 )
pnp         = polygons(82 , 44 )
lvs_prune   = polygons(84 , 44 )
padcenter   = polygons(81 , 20 )
mf          = polygons(76 , 44 )
areaid_sl   = polygons(81 , 1  )
areaid_ce   = polygons(81 , 2  )
areaid_fe   = polygons(81 , 3  )
areaid_sc   = polygons(81 , 4  )
areaid_sf   = polygons(81 , 6  )
areaid_sw   = polygons(81 , 7  )
areaid_sr   = polygons(81 , 8  )
areaid_mt   = polygons(81 , 10 )
areaid_dt   = polygons(81 , 11 )
areaid_ft   = polygons(81 , 12 )
areaid_ww   = polygons(81 , 13 )
areaid_ld   = polygons(81 , 14 )
areaid_ns   = polygons(81 , 15 )
areaid_ij   = polygons(81 , 17 )
areaid_zr   = polygons(81 , 18 )
areaid_ed   = polygons(81 , 19 )
areaid_de   = polygons(81 , 23 )
areaid_rd   = polygons(81 , 24 )
areaid_dn   = polygons(81 , 50 )
areaid_cr   = polygons(81 , 51 )
areaid_cd   = polygons(81 , 52 )
areaid_st   = polygons(81 , 53 )
areaid_op   = polygons(81 , 54 )
areaid_en   = polygons(81 , 57 )
areaid_en20 = polygons(81 , 58 )
areaid_le   = polygons(81 , 60 )
areaid_hl   = polygons(81 , 63 )
areaid_sd   = polygons(81 , 70 )
areaid_po   = polygons(81 , 81 )
areaid_it   = polygons(81 , 84 )
areaid_et   = polygons(81 , 101)
areaid_lvt  = polygons(81 , 108)
areaid_re   = polygons(81 , 125)
areaid_ag   = polygons(81 , 79 )
cfom        = polygons(22 , 20 )


logger.info("Read in labels from layers.")

#=== LABELS ===
sub_label       = labels(122, 5)
pwelliso_label  = labels(44 , 5)
nwell_label     = labels(64 , 5)
pwell_label     = labels(64 ,59)
tap_label       = labels(65 , 5)
diff_label      = labels(65 , 6)
poly_label      = labels(66 , 5)
poly_model      = labels(66 ,15)
li_label        = labels(67 , 5)
met1_label      = labels(68 , 5)
met2_label      = labels(69 , 5)
met3_label      = labels(70 , 5)
met4_label      = labels(71 , 5)
met5_label      = labels(72 , 5)
rdl_label       = labels(74 , 5)
pad_label       = labels(76 , 5)

#=== BULK LAYER ===
sub = polygon_layer

#================================================
#------------------ SWITCHES --------------------
#================================================

logger.info("Evaluate switches start.")

# SCH_SIMPLE
if $schematic_simplify
  SCH_SIMPLE = $schematic_simplify
else
  SCH_SIMPLE = false
end # SCH_SIMPLE

logger.info("SCH_SIMPLE enabled  %s" % [SCH_SIMPLE])

# NET_ONLY
if $net_only
  NET_ONLY = true
else
  NET_ONLY = false
end # NET_ONLY

logger.info("NET_ONLY enabled  %s" % [NET_ONLY])

# TOP_LVL_PINS
if $top_lvl_pins
  TOP_LVL_PINS = true
else
  TOP_LVL_PINS = false
end # TOP_LVL_PINS

logger.info("TOP_LVL_PINS enabled  %s" % [TOP_LVL_PINS])

# COMBINE
if $combine
  COMBINE = true
else
  COMBINE = false
end # COMBINE

logger.info("COMBINE enabled  %s" % [COMBINE])

# PURGE
if $purge
  PURGE = true
else
  PURGE = false
end # PURGE

logger.info("PURGE enabled  %s" % [PURGE])

# PURGE_NETS
if $purge_nets
  PURGE_NETS = true
else
  PURGE_NETS = false
end # PURGE_NETS

logger.info("PURGE_NETS enabled  %s" % [PURGE_NETS])

# SIMPLIFY
if $net_only || $top_lvl_pins || $combine || $purge || $purge_nets
  SIMPLIFY = false
else
  SIMPLIFY = true
end # SIMPLIFY

logger.info("SIMPLIFY enabled  %s" % [SIMPLIFY])

logger.info("Evaluate switches end.")

#================================================================
#------------------------- MAIN RUNSET --------------------------
#================================================================

logger.info("SKY130 LVS rules started")

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info("Starting deriving base layers.")

#==================================
# ------ GENERAL DERIVATIONS ------
#==================================

ncomp         = diff.and(nsdm)
pcomp         = diff.and(psdm)
tgate         = poly.and(diff).not(poly_res)

ngate         = nsdm.and(tgate)
nsd           = ncomp.outside(nwell).interacting(ngate).not(ngate).not(diff_res)
ptap          = tap.and(psdm).outside(nwell).not(diff_res)

pgate         = psdm.and(tgate)
psd           = pcomp.inside(nwell).interacting(pgate).not(pgate).not(diff_res)
ntap          = tap.and(nsdm).inside(nwell).not(diff_res)

poly_con      = poly.not(poly_res)
li_con        =   li.not( li_res )
met1_con      = met1.not(met1_res)
met2_con      = met2.not(met2_res)
met3_con      = met3.not(met3_res)
met4_con      = met2.not(met4_res)
met5_con      = met3.not(met5_res)

#==================================
# ------ MOSFET DERIVATIONS -------
#==================================

logger.info("Starting MOSFET DERIVATIONS")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS layers DERIVATIONS")

# 1.8V PMOS transistor standard
pgate_1p8v = pgate.not(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell)

# 1.8V PMOS transistor low threshold voltage
pgate_1p8v_lvt = pgate.not(hvtp).not(ncm).not(hvi).and(lvtn).and(nwell).not(dnwell)

# 1.8V PMOS transistor high threshold voltage
pgate_1p8v_hvt = pgate.and(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).not(areaid_ce)

# 5V gate 10.5V drain PMOS transistor
pgate_5p0v_hv = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).not(dnwell).not_interacting(areaid_ed)

# 5V gate 16V drain PMOS transistor
pgate_5p0v_vhv = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).interacting(nwell).and(dnwell).and(areaid_en)

# Pass PMOS transistor
pgate_pass = pgate.and(hvtp).and(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ce)

# Pass PMOS transistor low leakage
pgate_pass_ll = pgate.and(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ce)

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS layers DERIVATIONS")

# 1.8V NMOS transistor standard
ngate_1p8v = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not_interacting(areaid_ed).not_interacting(areaid_ce)

# 1.8V NMOS transistor low threshold voltage
ngate_1p8v_lvt = ngate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(nwell).not(dnwell).not_interacting(areaid_ce)

# 5V gate 10.5V drain NMOS transistor
ngate_5p0v_hv = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).not_interacting(areaid_ed)

# 5V gate 16V drain NMOS transistor
ngate_5p0v_vhv = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).interacting(nwell).and(dnwell).and(areaid_en)

# Pass NMOS transistor
ngate_pass = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_pass"))

# Pass NMOS transistor low threshold voltage
ngate_pass_lvt = ngate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_pass_lvt"))

# Pass NMOS transistor low leakage
ngate_pass_ll = ngate.not(hvtp).and(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_pass_lowleakage"))

# Latch NMOS transistor
ngate_latch = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_latch"))

# Latch NMOS transistor low leakage
ngate_latch_ll = ngate.not(hvtp).and(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_latch_lowleakage"))

# Flash pass NMOS transistor
ngate_flash_pass = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_pass_flash"))

# Flash pass NMOS transistor low leakage
ngate_flash_pass_ll = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).and(poly_model.texts("sky130_fd_pr__special_nfet_pass_flash_lowleakage"))

# 3.3V NMOS transistor native voltage
ngate_3p0v_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).and(areaid_le)

# 5V NMOS transistor native voltage
ngate_5p0v_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(areaid_le).not_interacting(areaid_ed)


#================================
# ---- MOS ESD DERIVATIONS ------
#================================

logger.info("Starting MOS SAB DERIVATIONS")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS SAB DERIVATIONS")

# 5V gate 10.5V drain ESD PMOS transistor
pgate_5p0v_hv_esd = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ed)

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS SAB DERIVATIONS")

# 1.8V ESD NMOS transistor standard
ngate_1p8v_esd = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(areaid_ed)

# 5V gate 10.5V drain ESD NMOS transistor
ngate_5p0v_hv_esd = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).and(areaid_ed)

# 5V gate 10.5V drain ESD NMOS transistor native voltage
ngate_5p0v_hv_esd_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).and(areaid_ed)

# 5V NMOS transistor native voltage
ngate_5p0v_nvt_esd = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(areaid_le).and(areaid_ed)


#================================
# ------ BJT DERIVATIONS --------
#================================

logger.info("Starting BJT DERIVATIONS")

#==============
# ---- npn ----
#==============

logger.info("Starting NPN layers DERIVATIONS")

# NPN general nodes DERIVATIONS
npn_e = ncomp.inside(dnwell).interacting(npnid)
npn_b = ptap.inside(dnwell).interacting(npnid)
npn_c = ntap.inside(dnwell).interacting(npnid)

# 5V NPN with emitter size of 1umx1um nodes DERIVATIONS
npn_5v0_1x1_e = npn_e.with_area(0.81.um, 1.21.um).interacting(npn_e.edges.with_length(0.9.um, 1.1.um)).not_interacting(poly)
npn_5v0_1x1_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x1_e))
npn_5v0_1x1_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x1_e))  

# 5V NPN with emitter size of 1umx2um DERIVATIONS
npn_5v0_1x2_e = npn_e.with_area(1.71.um, 2.31.um).interacting(npn_e.edges.with_length(1.9.um, 2.1.um)).not_interacting(poly)
npn_5v0_1x2_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x2_e))
npn_5v0_1x2_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x2_e))                       

# 11V NPN poly-gated with octagonal emitter nodes DERIVATIONS
npn_11v0_1x1_e = npn_e.interacting(poly)
npn_11v0_1x1_b = npn_b.interacting(npn_b.extents.interacting(npn_11v0_1x1_e))
npn_11v0_1x1_c = npn_c.interacting(npn_c.extents.interacting(npn_11v0_1x1_e)) 

#==============
# ---- pnp ----
#==============

logger.info("Starting PNP layers DERIVATIONS")

# PNP general nodes DERIVATIONS
pnp_e = pcomp.inside(nwell).interacting(pnpid)
pnp_b = ntap.interacting(pnpid)
pnp_c = ptap.interacting(pnpid)

# 5V PNP with emitter size of 0.68umx0.68um DERIVATIONS
pnp_5v0_0p68x0p68_e = pnp_e.with_area(0.3364.um, 0.6084.um).interacting(pnp_e.edges.with_length(0.58.um, 0.78.um))
pnp_5v0_0p68x0p68_b = pnp_b.interacting(pnp_b.extents.interacting(pnp_5v0_0p68x0p68_e))
pnp_5v0_0p68x0p68_c = pnp_c.interacting(pnp_c.extents.interacting(pnp_5v0_0p68x0p68_e))  

# 5V PNP with emitter size of 3.4umx3.4um DERIVATIONS
pnp_5v0_3p4x3p4_e = pnp_e.with_area(10.24.um, 12.96.um).interacting(pnp_e.edges.with_length(3.2.um, 3.6.um))
pnp_5v0_3p4x3p4_b = pnp_b.interacting(pnp_b.extents.interacting(pnp_5v0_3p4x3p4_e))
pnp_5v0_3p4x3p4_c = pnp_c.interacting(pnp_c.extents.interacting(pnp_5v0_3p4x3p4_e))  


#================================
# ----- DIODE DERIVATIONS -------
#================================

logger.info("Starting DIODE DERIVATIONS")

# 5V N+ diffusion diode
ndiff_5v0_terminal_n = ncomp.not(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)

# 5V N+ diffusion diode low threshold voltage
ndiff_5v0_lvt_terminal_n = ncomp.not(hvtp).not(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)

# 5V N+ diffusion diode native threshold voltage
ndiff_5v0_nvt_terminal_n = ncomp.not(hvtp).and(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)

# 11V N+ diffusion diode
ndiff_11v0_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).not_interacting(areaid_ed)

# 5V P+ diffusion diode
pdiff_5v0_terminal_n = pcomp.not(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)

# 5V P+ diffusion diode low threshold voltage
pdiff_5v0_lvt_terminal_n = pcomp.not(hvtp).not(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)

# 5V P+ diffusion diode high threshold voltage
pdiff_5v0_hvt_terminal_n = pcomp.and(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)

# 11V P+ diffusion diode
pdiff_11v0_terminal_n = pcomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).not_interacting(areaid_ed)


#================================
# --- ESD DIODE DERIVATIONS -----
#================================

logger.info("Starting ESD DIODE DERIVATIONS")

# ESD 11V N+ diffusion diode
ndiff_11v0_esd_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).interacting(areaid_ed)

# ESD 11V N+ diffusion in deep nwell diode
ndiff_11v0_esd_dnwell_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).and(dnwell).interacting(areaid_de).interacting(areaid_ed)

# ESD 11V P+ diffusion diode
pdiff_11v0_esd_terminal_n = pcomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).interacting(areaid_ed)


#================================
# --- PHOTODIODE DERIVATIONS ----
#================================

logger.info("Starting PHOTODIODE DERIVATIONS")

# Photodiode
photodiode = tap.and(nsdm).and(nwell).and(dnwell).interacting(areaid_po)


#================================
# ---- RESISTOR DERIVATIONS -----
#================================

logger.info("Starting RESISTOR DERIVATIONS")

# ===============
# --DIFF & WELL--
# ===============

# N+ diffusion resistor
nplus_layer       = ncomp.and(diff_res).not(hvi)
nplus_cont        = ncomp.not_interacting(ngate).interacting(diff_res).not(diff_res).not(hvi)

# N+ diffusion high voltage resistor
nplus_hv_layer    = ncomp.and(diff_res).and(hvi)
nplus_hv_cont     = ncomp.not_interacting(ngate).interacting(diff_res).not(diff_res).and(hvi)

# P+ diffusion resistor
pplus_layer       = pcomp.and(nwell).and(diff_res).not(hvi)
pplus_cont        = pcomp.and(nwell).not_interacting(pgate).interacting(diff_res).not(diff_res).not(hvi)

# P+ diffusion high voltage resistor
pplus_hv_layer    = pcomp.and(nwell).and(diff_res).and(hvi)
pplus_hv_cont     = pcomp.and(nwell).not_interacting(pgate).interacting(diff_res).not(diff_res).and(hvi)

# Isolated PWELL resistor
pwell_layer       = pwell_res.not(nwell).and(dnwell)
pwell_cont        = tap.and(psdm).not(nwell).and(dnwell).interacting(pwell_res).not(pwell_res)

# ==============
# ---- POLY ----
# ==============

# Poly resistor
poly_layer       = poly.not(psdm).not_interacting(diff).and(poly_res).not(rpm).not(urpm)

# 300 ohm Poly resistor
poly_300_layer   = poly.and(psdm).not_interacting(diff).and(poly_res).and(rpm).not(urpm)

poly_high_0p35   = poly_300_layer.interacting(poly_300_layer.edges.with_length(0.34.um, 0.36.um))
poly_high_0p69   = poly_300_layer.interacting(poly_300_layer.edges.with_length(0.68.um, 0.7.um ))
poly_high_1p41   = poly_300_layer.interacting(poly_300_layer.edges.with_length(1.4.um , 1.42.um))
poly_high_2p85   = poly_300_layer.interacting(poly_300_layer.edges.with_length(2.84.um, 2.86.um))
poly_high_5p73   = poly_300_layer.interacting(poly_300_layer.edges.with_length(5.72.um, 5.74.um))

# 2K ohm Poly resistor
poly_2k_layer    = poly.and(psdm).not_interacting(diff).and(poly_res).not(rpm).and(urpm)

poly_xhigh_0p35  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(0.34.um, 0.36.um))
poly_xhigh_0p69  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(0.68.um, 0.7.um ))
poly_xhigh_1p41  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(1.4.um , 1.42.um))
poly_xhigh_2p85  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(2.84.um, 2.86.um))
poly_xhigh_5p73  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(5.72.um, 5.74.um))

# ===============
# ---- METAL ----
# ===============

# Local inter-connect resistor
li_res_layer    =   li.and(li_res)

# Metal1 resistor
met1_res_layer  = met1.and(met1_res)

# Metal2 resistor
met2_res_layer  = met2.and(met2_res)

# Metal3 resistor
met3_res_layer  = met3.and(met3_res)

# Metal4 resistor
met4_res_layer  = met4.and(met4_res)

# Metal5 resistor
met5_res_layer  = met5.and(met5_res)


#==================================
# ------- FUSE DERIVATIONS --------
#==================================

logger.info("Starting FUSE DERIVATIONS")

# Metal2 fuse
met2_fuse_res_layer  = met2_con.and(met2_fuse)
met2_fuse_con_layer  = met2_con.not(met2_fuse)

# Metal3 fuse
met3_fuse_res_layer  = met3_con.and(met3_fuse)
met3_fuse_con_layer  = met3_con.not(met3_fuse)

# Metal4 fuse
met4_fuse_res_layer  = met4_con.and(met4_fuse)
met4_fuse_con_layer  = met4_con.not(met4_fuse)


#==================================
# ------ MIMCAP DERIVATIONS -------
#==================================

logger.info("Starting MIMCAP DERIVATIONS")

# mim on metal3
met3_ncap = met3_con.not(capm)

# mim on metal4
met4_ncap = met4_con.not(capm2)


#==================================
# ----- VARACTOR DERIVATIONS ------
#==================================

logger.info("Starting VARACTOR DERIVATIONS")

# Low threshold voltage varactor
varactor_gate_lvt = poly.and(tap).and(nsdm).not(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell)
varactor_nsd_lvt  = tap.and(nsdm).not(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell).interacting(varactor_gate_lvt).not(varactor_gate_lvt).not(diff_res)

# High threshold voltage varactor
varactor_gate_hvt = poly.and(tap).and(nsdm).and(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell)
varactor_nsd_hvt  = tap.and(nsdm).and(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell).interacting(varactor_gate_hvt).not(varactor_gate_hvt).not(diff_res)

# High voltage varactor
varactor_gate_hv  = poly.and(tap).and(nsdm).not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).not(dnwell)
varactor_nsd_hv   = tap.and(nsdm).not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).not(dnwell).interacting(varactor_gate_hvt).not(varactor_gate_hvt).not(diff_res)


#==================================
# ------ VPP CAP DERIVATIONS ------
#==================================

logger.info("Starting VPP CAP DERIVATIONS")

#
vpp_c0 = met2_pin.interacting(vpp)
vpp_c1 = met4_pin.interacting(vpp)


#==================================
# ----- INDUCTOR DERIVATIONS ------
#==================================

logger.info("Startng INDUCTOR DERIVATIONS")

#
ind_c0 = met3_pin.interacting(inductor)
ind_c1 = met2_pin.interacting(inductor)


#================================================
#------------ DEVICES CONNECTIVITY --------------
#================================================

logger.info("Starting SKY130 LVS connectivity setup")

#================================
# ----- GENERAL CONNECTIONS -----
#================================

logger.info("Starting SKY130 LVS connectivity setup (Inter-layer)")

# Inter-layer
connect(sub         ,          ptap)
connect(dnwell      ,          ntap)
connect(nwell       ,          ntap)
connect(ptap        ,         licon)
connect(ntap        ,         licon)
connect(psd         ,         licon)
connect(nsd         ,         licon)
connect(poly_con    ,         licon)
connect(licon       ,        li_con)
connect(li_con      ,          mcon)
connect(mcon        ,      met1_con)
connect(met1_con    ,          via1)
connect(via1        ,      met2_con)
connect(met2_con    ,          via2)
connect(via2        ,     met3_ncap)
connect(met3_ncap   ,          via3)
connect(via3        ,     met4_ncap)
connect(met4_ncap   ,          via4)
connect(via4        ,      met5_con)

logger.info("Starting SKY130 LVS connectivity setup (Attaching labels)")

# Attaching labels
connect(sub         ,      sub_label)
connect(nwell       ,    nwell_label)
connect(tap         ,      tap_label)
connect(diff        ,     diff_label)
connect(poly_con    ,     poly_label)
connect(li_con      ,       li_label)
connect(met1_con    ,     met1_label)
connect(met2_con    ,     met2_label)
connect(met3_ncap   ,     met3_label)
connect(met4_ncap   ,     met4_label)
connect(met5_con    ,     met5_label)
connect(rdl         ,      rdl_label)
connect(pad         ,      pad_label)

# Attaching pins
connect(sub         ,        sub_pin)
connect(nwell       ,      nwell_pin)
connect(poly_con    ,       poly_pin)
connect(li_con      ,         li_pin)
connect(met1_con    ,       met1_pin)
connect(met2_con    ,       met2_pin)
connect(met3_ncap   ,       met3_pin)
connect(met4_ncap   ,       met4_pin)
connect(met5_con    ,       met5_pin)
connect(rdl         ,        rdl_pin)

logger.info("Starting SKY130 LVS connectivity setup (Global connections)")

# Global
connect_global(sub  , substrate_name)

logger.info("Starting SKY130 LVS connectivity setup (Multifinger Devices)")

# Multifinger Devices
connect_implicit("*")


#================================
# ----- MOSFET CONNECTIONS ------
#================================

logger.info("Starting LVS MOSFET CONNECTIONS")

#


#================================
# ----- MOS ESD CONNECTIONS -----
#================================

logger.info("Starting LVS MOS ESD CONNECTIONS")

#


#================================
# ------ BJT CONNECTIONS --------
#================================

logger.info("Starting LVS BJT CONNECTIONS")

# ==============
# ---- npn ----
# ==============

# npn_5v0_1x1 nodes connections
connect(npn_5v0_1x1_e,licon)
connect(npn_5v0_1x1_b,licon)
connect(npn_5v0_1x1_c,licon)

# npn_5v0_1x2 nodes connections
connect(npn_5v0_1x2_e,licon)
connect(npn_5v0_1x2_b,licon)
connect(npn_5v0_1x2_c,licon)

# npn_5v0_1x1 nodes connections
connect(npn_11v0_1x1_e,licon)
connect(npn_11v0_1x1_b,licon)
connect(npn_11v0_1x1_c,licon)

# ==============
# ---- pnp ----
# ==============

# pnp_5v0_0p68x0p68 connections
connect(pnp_5v0_0p68x0p68_e,licon)
connect(pnp_5v0_0p68x0p68_b,licon)
connect(pnp_5v0_0p68x0p68_c,licon)

# pnp_5v0_3p4x3p4 nodes
connect(pnp_5v0_3p4x3p4_e,licon)
connect(pnp_5v0_3p4x3p4_b,licon)
connect(pnp_5v0_3p4x3p4_c,licon)


#================================
# ----- DIODE CONNECTIONS -------
#================================

logger.info("Starting LVS DIODE CONNECTIONS")

# 5V N+ diffusion diode
connect(ndiff_5v0_terminal_n, licon)

# 5V N+ diffusion diode low threshold voltage
connect(ndiff_5v0_lvt_terminal_n, licon)

# 5V N+ diffusion diode native threshold voltage
connect(ndiff_5v0_nvt_terminal_n, licon)

# 11V N+ diffusion diode
connect(ndiff_11v0_terminal_n, licon)

# 5V P+ diffusion diode
connect(pdiff_5v0_terminal_n, licon)

# 5V P+ diffusion diode low threshold voltage
connect(pdiff_5v0_lvt_terminal_n, licon)

# 5V P+ diffusion diode high threshold voltage
connect(pdiff_5v0_hvt_terminal_n, licon)

# 11V P+ diffusion diode
connect(pdiff_11v0_terminal_n, licon)


#================================
# ---- ESD DIODE CONNECTIONS ----
#================================

logger.info("Starting LVS ESD DIODE CONNECTIONS")

# ESD 11V N+ diffusion diode
connect(ndiff_11v0_esd_terminal_n, licon)

# ESD 11V N+ diffusion in deep dnwell diode
connect(ndiff_11v0_esd_dnwell_terminal_n, licon)

# ESD 11V P+ diffusion diode
connect(pdiff_11v0_esd_terminal_n, licon)


#================================
# --- PHOTODIODE CONNECTIONS ----
#================================

logger.info("Starting LVS PHOTODIODE CONNECTIONS")

# Photodiode
connect(photodiode, licon)


#================================
# ---- RESISTOR DERIVATIONS -----
#================================

logger.info("Starting LVS RESISTOR CONNECTIONS")

# Diffusions and Wells
connect(nplus_cont    , licon)
connect(nplus_hv_cont , licon)
connect(pplus_cont    , licon)
connect(pplus_hv_cont , licon)
connect(pwell_cont    , licon)


#================================
# ---- FUSE DERIVATIONS -----
#================================

logger.info("Starting LVS FUSE CONNECTIONS")

# Metal2 fuse
connect(met2_fuse_con_layer    , via2)

# Metal3 fuse
connect(met3_fuse_con_layer    , via3)

# Metal4 fuse
connect(met4_fuse_con_layer    , via4)


#==================================
# ------ MIMCAP CONNECTIONS -------
#==================================

logger.info("Starting LVS MIMCAP CONNECTIONS")

# mim on metal3
connect(capm , via3)

# mim on metal4
connect(capm2, via4)


#================================
# ---- VARACTOR CONNECTIONS -----
#================================

logger.info("Starting LVS VARACTOR CONNECTIONS")

# Low threshold voltage varactor
connect(varactor_gate_lvt,  licon)
connect(varactor_nsd_lvt ,  licon)

# High threshold voltage varactor
connect(varactor_gate_hvt,  licon)
connect(varactor_nsd_hvt ,  licon)

# High voltage varactor
connect(varactor_gate_hv ,  licon)
connect(varactor_nsd_hv  ,  licon)


#================================
# ----- VPP CAP CONNECTIONS -----
#================================

logger.info("Starting LVS VPP CAP CONNECTIONS")

#


#================================
# ---- INDUCTOR CONNECTIONS -----
#================================

logger.info("Starting LVS INDUCTOR CONNECTIONS")

#


#================================================
#------------- DEVICES EXTRACTION ---------------
#================================================

logger.info("Starting SKY130 LVS DEVICES EXTRACTION")

#================================
# ----- MOSFET EXTRACTION -------
#================================

logger.info("Starting MOSFET EXTRACTION")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS EXTRACTION")

# 1.8V PMOS transistor standard
logger.info("Extracting 1.8V PMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__pfet_01v8"), { "SD" => psd, "G" => pgate_1p8v, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 1.8V PMOS transistor low threshold voltage
logger.info("Extracting 1.8V PMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__pfet_01v8_lvt"), { "SD" => psd, "G" => pgate_1p8v_lvt,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 1.8V PMOS transistor high threshold voltage
logger.info("Extracting 1.8V PMOS transistor high threshold voltage")
extract_devices(mos4("sky130_fd_pr__pfet_01v8_hvt"), { "SD" => psd, "G" => pgate_1p8v_hvt,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 5V gate 10.5V drain PMOS transistor
logger.info("Extracting 5V gate 10.5V drain PMOS transistor")
extract_devices(mos4("sky130_fd_pr__pfet_g5v0d10v5"), { "SD" => psd, "G" => pgate_5p0v_hv,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 5V gate 16V drain PMOS transistor
logger.info("Extracting 5V gate 16V drain PMOS transistor")
extract_devices(mos4("sky130_fd_pr__pfet_g5v0d16v0"), { "SD" => psd, "G" => pgate_5p0v_vhv,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# Pass PMOS transistor
logger.info("Extracting Pass PMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_pfet_pass"), { "SD" => psd, "G" => pgate_pass,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# Pass PMOS transistor low leakage
logger.info("Extracting Pass PMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_pfet_pass_lowleakage"), { "SD" => psd, "G" => pgate_pass_ll,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS EXTRACTION")

# 1.8V NMOS transistor standard
logger.info("Extracting 1.8V NMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__nfet_01v8"), { "SD" => nsd, "G" => ngate_1p8v, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 1.8V NMOS transistor low threshold voltage
logger.info("Extracting 1.8V NMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__nfet_01v8_lvt"), { "SD" => nsd, "G" => ngate_1p8v_lvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor
logger.info("Extracting 5V gate 10.5V drain NMOS transistor")
extract_devices(mos4("sky130_fd_pr__nfet_g5v0d10v5"), { "SD" => nsd, "G" => ngate_5p0v_hv, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 16V drain NMOS transistor
logger.info("Extracting 5V gate 16V drain NMOS transistor")
extract_devices(mos4("sky130_fd_pr__nfet_g5v0d16v0"), { "SD" => nsd, "G" => ngate_5p0v_vhv, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Pass NMOS transistor
logger.info("Extracting Pass NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass"), { "SD" => nsd, "G" => ngate_pass, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Pass NMOS transistor low threshold voltage
logger.info("Extracting Pass NMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_lvt"), { "SD" => nsd, "G" => ngate_pass_lvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Pass NMOS transistor low leakage
logger.info("Extracting Pass NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_lowleakage"), { "SD" => nsd, "G" => ngate_pass_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Latch NMOS transistor
logger.info("Extracting Latch NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_latch"), { "SD" => nsd, "G" => ngate_latch, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Latch NMOS transistor low leakage
logger.info("Extracting Latch NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_latch_lowleakage"), { "SD" => nsd, "G" => ngate_latch_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Flash pass NMOS transistor
logger.info("Extracting Flash pass NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_flash"), { "SD" => nsd, "G" => ngate_flash_pass, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Flash pass NMOS transistor low leakage
logger.info("Extracting Flash pass NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_flash_ll"), { "SD" => nsd, "G" => ngate_flash_pass_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 3.3V NMOS transistor native voltage
logger.info("Extracting 3.3V NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_03v3_nvt"), { "SD" => nsd, "G" => ngate_3p0v_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V NMOS transistor native voltage
logger.info("Extracting 5V NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_05v0_nvt"), { "SD" => nsd, "G" => ngate_5p0v_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })


#================================
# ----- MOS ESD EXTRACTION ------
#================================

logger.info("Starting MOS ESD EXTRACTION")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS ESD EXTRACTION")

# 5V gate 10.5V drain ESD PMOS transistor
logger.info("Extracting 5V gate 10.5V drain ESD PMOS transistor")
extract_devices(mos4("sky130_fd_pr__esd_pfet_g5v0d10v5"), { "SD" => psd, "G" => pgate_5p0v_hv_esd, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS ESD EXTRACTION")

# 1.8V ESD NMOS transistor standard
logger.info("Extracting 1.8V ESD NMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__esd_nfet_01v8"), { "SD" => nsd, "G" => ngate_1p8v_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor
logger.info("Extracting 5V gate 10.5V drain ESD NMOS transistor")
extract_devices(mos4("sky130_fd_pr__esd_nfet_g5v0d10v5"), { "SD" => nsd, "G" => ngate_5p0v_hv_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor native voltage
logger.info("Extracting 5V gate 10.5V drain ESD NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__esd_nfet_g5v0d10v5_nvt"), { "SD" => nsd, "G" => ngate_5p0v_hv_esd_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V NMOS transistor native voltage
logger.info("Extracting 5V ESD NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_05v0_nvt"), { "SD" => nsd, "G" => ngate_5p0v_nvt_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })



#================================
# ------- BJT EXTRACTION --------
#================================

logger.info("Starting BJT EXTRACTION")

# ====================
# ------ NPN --------
# ====================

logger.info("Starting NPN BJT EXTRACTION")

# sky130_fd_pr__npn_05v5_W1p00L1p00 BJT
ignore_parameter("sky130_fd_pr__npn_05v5_W1p00L1p00","AE")
logger.info("Extracting sky130_fd_pr__npn_05v5_W1p00L1p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_05v5_W1p00L1p00"), { "C" => npn_5v0_1x1_c.extents , "B" => npn_5v0_1x1_b.extents , "E" => npn_5v0_1x1_e,"S" => sub.extents,
                                  "tC" => npn_5v0_1x1_c , "tB" => npn_5v0_1x1_b, "tE" => npn_5v0_1x1_e, "tS" => sub })

# sky130_fd_pr__npn_05v5_W1p00L2p00 BJT
ignore_parameter("sky130_fd_pr__npn_05v5_W1p00L2p00","AE")
logger.info("Extracting sky130_fd_pr__npn_05v5_W1p00L2p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_05v5_W1p00L2p00"), { "C" => npn_5v0_1x2_c.extents , "B" => npn_5v0_1x2_b.extents , "E" => npn_5v0_1x2_e,"S" => sub.extents,
                                "tC" => npn_5v0_1x2_c , "tB" => npn_5v0_1x2_b, "tE" => npn_5v0_1x2_e, "tS" => sub })

# sky130_fd_pr__npn_11v0_W1p00L1p00 BJT
ignore_parameter("sky130_fd_pr__npn_11v0_W1p00L1p00","AE")
logger.info("Extracting sky130_fd_pr__npn_11v0_W1p00L1p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_11v0_W1p00L1p00"), { "C" => npn_11v0_1x1_c.extents , "B" => npn_11v0_1x1_b.extents , "E" => npn_11v0_1x1_e,"S" => sub.extents,
                                  "tC" => npn_11v0_1x1_c , "tB" => npn_11v0_1x1_b, "tE" => npn_11v0_1x1_e, "tS" => sub })

# ====================
# ------- PNP --------
# ====================

logger.info("Starting PNP BJT EXTRACTION")

# sky130_fd_pr__pnp_05v5_W0p68L0p68 BJT
ignore_parameter("sky130_fd_pr__pnp_05v5_W0p68L0p68","AE")
logger.info("Extracting sky130_fd_pr__pnp_05v5_W0p68L0p68 BJT")
extract_devices(bjt4("sky130_fd_pr__pnp_05v5_W0p68L0p68"), { "C" => pnp_5v0_0p68x0p68_c.extents , "B" => pnp_5v0_0p68x0p68_b.extents , "E" => pnp_5v0_0p68x0p68_e,"S" => sub.extents,
                                  "tC" => pnp_5v0_0p68x0p68_c , "tB" => pnp_5v0_0p68x0p68_b, "tE" => pnp_5v0_0p68x0p68_e, "tS" => sub })

# sky130_fd_pr__pnp_05v5_W3p40L3p40 BJT
ignore_parameter("sky130_fd_pr__pnp_05v5_W3p40L3p40","AE")
logger.info("Extracting sky130_fd_pr__pnp_05v5_W3p40L3p40 BJT")
extract_devices(bjt4("sky130_fd_pr__pnp_05v5_W3p40L3p40"), { "C" => pnp_5v0_3p4x3p4_c.extents , "B" => pnp_5v0_3p4x3p4_b.extents , "E" => pnp_5v0_3p4x3p4_e,"S" => sub.extents,
                                "tC" => pnp_5v0_3p4x3p4_c , "tB" => pnp_5v0_3p4x3p4_b, "tE" => pnp_5v0_3p4x3p4_e, "tS" => sub })

                                
#================================
# ------ DIODE EXTRACTION -------
#================================

logger.info("Starting DIODE EXTRACTION")

# 5V N+ diffusion diode
logger.info("Extracting 5V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5"), { "N" => ndiff_5v0_terminal_n , "P" => sub})

# 5V N+ diffusion diode low threshold voltage
logger.info("Extracting 5V N+ diffusion diode low threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5_lvt"), { "N" => ndiff_5v0_lvt_terminal_n , "P" => sub})

# 5V N+ diffusion diode native threshold voltage
logger.info("Extracting 5V N+ diffusion diode native threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5_nvt"), { "N" => ndiff_5v0_nvt_terminal_n , "P" => sub})

# 11V N+ diffusion diode
logger.info("Extracting 11V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_11v0"), { "N" => ndiff_11v0_terminal_n , "P" => sub})

# 5V P+ diffusion diode
logger.info("Extracting 5V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5"), { "N" => pdiff_5v0_terminal_n , "P" => nwell})

# 5V P+ diffusion diode low threshold voltage
logger.info("Extracting5V P+ diffusion diode low threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5_lvt"), { "N" => pdiff_5v0_lvt_terminal_n , "P" => nwell})

# 5V P+ diffusion diode high threshold voltage
logger.info("Extracting 5V P+ diffusion diode high threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5_hvt"), { "N" => pdiff_5v0_hvt_terminal_n , "P" => nwell})

# 11V P+ diffusion diode
logger.info("Extracting 11V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_11v0"), { "N" => pdiff_11v0_terminal_n , "P" => nwell})


#================================
# ---- ESD DIODE EXTRACTIONS ----
#================================

logger.info("Starting ESD DIODE EXTRACTION")

# ESD 11V N+ diffusion diode
logger.info("Extracting 11V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__esd_diode_pw2nd_11v0"), { "N" => ndiff_11v0_esd_terminal_n , "P" => sub})

# ESD 11V N+ diffusion in deep dnwell diode
logger.info("Extracting 11V N+ diffusion in deep dnwell diode")
extract_devices(diode("sky130_fd_pr__esd_diode_dw_pw2nd_11v0"), { "N" => ndiff_11v0_esd_dnwell_terminal_n , "P" => dnwell})

# ESD 11V P+ diffusion diode
logger.info("Extracting ESD 11V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__esd_diode_pd2nw_11v0"), { "N" => pdiff_11v0_esd_terminal_n , "P" => nwell})


#================================
#---- PHOTODIODE EXTRACTIONS ----
#================================

logger.info("Starting PHOTODIODE EXTRACTION")

# Photodiode
logger.info("Extracting Photodiode")
extract_devices(diode("sky130_fd_pr__photodiode"), { "N" => photodiode , "P" => dnwell})


#================================
# ---- RESISTOR EXTRACTIONS -----
#================================

logger.info("Starting RESISTOR EXTRACTION")

# ===============
# --DIFF & WELL--
# ===============

# sky130_fd_pr__res_generic_nd
logger.info("Extracting sky130_fd_pr__res_generic_nd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_nd", 120, BResistor), { "R" => nplus_layer, "C" => nplus_cont, "W" => sub})

# sky130_fd_pr__res_generic_nd
logger.info("Extracting sky130_fd_pr__res_generic_nd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_nd_hv", 120, BResistor), { "R" => nplus_hv_layer, "C" => nplus_hv_cont, "W" => sub})

# sky130_fd_pr__res_generic_pd
logger.info("Extracting sky130_fd_pr__res_generic_pd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_pd", 197, BResistor), { "R" => pplus_layer, "C" => pplus_cont, "W" => nwell})

# sky130_fd_pr__res_generic_pd
logger.info("Extracting sky130_fd_pr__res_generic_pd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_pd_hv", 197, BResistor), { "R" => pplus_hv_layer, "C" => pplus_hv_cont, "W" => nwell})

# sky130_fd_pr__res_iso_pw
logger.info("Extracting sky130_fd_pr__res_iso_pw device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_iso_pw", 3050, BResistor), { "R" => pwell_layer, "C" => pwell_cont, "W" => dnwell})

# ==============
# ---- POLY ----
# ==============

# sky130_fd_pr__res_generic_po
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_po", 48.2, BResistor), { "R" => poly_layer, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_0p35
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_0p35", 319.8, BResistor), { "R" => poly_high_0p35, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_0p69
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_0p69", 319.8, BResistor), { "R" => poly_high_0p69, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_1p41
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_1p41", 319.8, BResistor), { "R" => poly_high_1p41, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_2p85
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_2p85", 319.8, BResistor), { "R" => poly_high_2p85, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_5p73
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_5p73", 319.8, BResistor), { "R" => poly_high_5p73, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_0p35
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_0p35", 2000, BResistor), { "R" => poly_xhigh_0p35, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_0p69
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_0p69", 2000, BResistor), { "R" => poly_xhigh_0p69, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_1p41
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_1p41", 2000, BResistor), { "R" => poly_xhigh_1p41, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_2p85
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_2p85", 2000, BResistor), { "R" => poly_xhigh_2p85, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_5p73
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_5p73", 2000, BResistor), { "R" => poly_xhigh_5p73, "C" => poly_con, "W" => sub})

# ===============
# ---- METAL ----
# ===============

# sky130_fd_pr__res_generic_l1
logger.info("Extracting sky130_fd_pr__res_generic_l1 device")
extract_devices(resistor("sky130_fd_pr__res_generic_l1", 12.2, NResistor), { "R" => li_res_layer, "C" => li_con })

# sky130_fd_pr__res_generic_m1
logger.info("Extracting sky130_fd_pr__res_generic_m1 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m1", 120, NResistor), { "R" => met1_res_layer, "C" => met1_con })

# sky130_fd_pr__res_generic_m2
logger.info("Extracting sky130_fd_pr__res_generic_m2 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m2", 120, NResistor), { "R" => met2_res_layer, "C" => met2_con })

# sky130_fd_pr__res_generic_m3
logger.info("Extracting sky130_fd_pr__res_generic_m3 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m3", 47, NResistor), { "R" => met3_res_layer, "C" => met3_ncap })

# sky130_fd_pr__res_generic_m4
logger.info("Extracting sky130_fd_pr__res_generic_m4 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m4", 47, NResistor), { "R" => met4_res_layer, "C" => met4_ncap })

# sky130_fd_pr__res_generic_m5
logger.info("Extracting sky130_fd_pr__res_generic_m5 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m5", 29, NResistor), { "R" => met5_res_layer, "C" => met5_con })


#==================================
# ------- FUSE EXTRACTION -------
#==================================

logger.info("Starting FUSE EXTRACTION")

# sky130_fd_pr__fuse_m2
logger.info("Extracting sky130_fd_pr__fuse_m2 device")
extract_devices(resistor("sky130_fd_pr__fuse_m2", 120, NResistor), { "R" => met2_fuse_res_layer, "C" => met2_fuse_con_layer })

# sky130_fd_pr__fuse_m3
logger.info("Extracting sky130_fd_pr__fuse_m3 device")
extract_devices(resistor("sky130_fd_pr__fuse_m3", 47, NResistor), { "R" => met3_fuse_res_layer, "C" => met3_fuse_con_layer })

# sky130_fd_pr__fuse_m4
logger.info("Extracting sky130_fd_pr__fuse_m4 device")
extract_devices(resistor("sky130_fd_pr__fuse_m4", 47, NResistor), { "R" => met4_fuse_res_layer, "C" => met4_fuse_con_layer })


#==================================
# ------- MIMCAP EXTRACTION -------
#==================================

logger.info("Starting MIMCAP EXTRACTION")

# sky130_fd_pr__model__cap_mim capacitor
extract_devices(capacitor("sky130_fd_pr__model__cap_mim", 2e-15, MIMCap), { "P1" => met3_ncap, "P2" => capm })
tolerance("sky130_fd_pr__model__cap_mim", "C", :relative => 1)


# sky130_fd_pr__model__cap_mim_m4 capacitor
extract_devices(capacitor("sky130_fd_pr__model__cap_mim_m4", 2e-15, MIMCap), { "P1" => met4_ncap, "P2" => capm2 })
tolerance("sky130_fd_pr__model__cap_mim_m4", "C", :relative => 1)



#==================================
# ------- VARACTOR EXTRACTION -------
#==================================

logger.info("Starting VARACTOR EXTRACTION")

# Low threshold voltage varactor
logger.info("Low threshold voltage varactor")
extract_devices(mos3("sky130_fd_pr__cap_var_lvt"), { "SD" => varactor_nsd_lvt, "G" => varactor_gate_lvt, "tS" => varactor_nsd_lvt, "tD" => varactor_nsd_lvt, "tG" => poly_con })

# High threshold voltage varactor
logger.info("High threshold voltage varactor")
extract_devices(mos3("sky130_fd_pr__cap_var_hvt"), { "SD" => varactor_nsd_hvt, "G" => varactor_gate_hvt, "tS" => varactor_nsd_hvt, "tD" => varactor_nsd_hvt, "tG" => poly_con })

# High voltage varactor
logger.info("High voltage varactor")
extract_devices(mos3("sky130_fd_pr__cap_var_hv"), { "SD" => varactor_nsd_hv, "G" => varactor_gate_hv, "tS" => varactor_nsd_hv, "tD" => varactor_nsd_hv, "tG" => poly_con })


#==================================
# ------ VPP CAP EXTRACTION -------
#==================================

logger.info("Starting VPP CAP EXTRACTION")

#
extract_devices(CustomCapacitorExtraction::new("VPP"), {"C0" => vpp_c0, "C1" => vpp_c1, "M" => vpp, "B" => pwell_pin })


#==================================
# ------ INDUCTOR EXTRACTION ------
#==================================

logger.info("Starting INDUCTOR EXTRACTION")

#
extract_devices(CustomInductorExtraction::new("IND"), {"C0" => ind_c0, "C1" => ind_c1, "M" => inductor, "B" => pwell_pin })


#================================================
#------------- COMPARISON OPTIONS ---------------
#================================================

logger.info("Starting SKY130 LVS comparison section")

#=== FLATTEN CELLS ===
align

#=== NETLIST EXTRACTION ===
if SIMPLIFY
  netlist.simplify
end

#=== NETLIST OPTIONS ===
if NET_ONLY
  netlist
end

if TOP_LVL_PINS
  netlist.make_top_level_pins
end

if COMBINE
  netlist.combine_devices
end

if PURGE
  netlist.purge
end

if PURGE_NETS
  netlist.purge_nets
end

#=== SCHEMATIC OPTIONS ===
if SCH_SIMPLE
  schematic.simplify
end

#=== IGNORE EXTREME VALUES ===
max_res(1e7)
min_caps(1e-16)


compare

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("DRC Total Run time %f seconds" % [run_time])




if ! compare
  logger.info("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
  logger.error("ERROR : Netlists don't match")
  logger.info("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
else
  logger.info("==========================================")
  logger.info("INFO : Congratulations! Netlists match.")
  logger.info("==========================================")
end



